/*! For license information please see 356.js.LICENSE.txt */
"use strict";(self.webpackChunknpwd_esx_banking=self.webpackChunknpwd_esx_banking||[]).push([[356],{5251:(n,e,t)=>{t(7418);var r=t(2950),o=60103;if("function"==typeof Symbol&&Symbol.for){var i=Symbol.for;o=i("react.element"),i("react.fragment")}var a=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,d=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};e.jsx=function(n,e,t){var r,i={},l=null,c=null;for(r in void 0!==t&&(l=""+t),void 0!==e.key&&(l=""+e.key),void 0!==e.ref&&(c=e.ref),e)d.call(e,r)&&!p.hasOwnProperty(r)&&(i[r]=e[r]);if(n&&n.defaultProps)for(r in e=n.defaultProps)void 0===i[r]&&(i[r]=e[r]);return{$$typeof:o,type:n,key:l,ref:c,props:i,_owner:a.current}}},5893:(n,e,t)=>{n.exports=t(5251)},4274:(n,e,t)=>{t.d(e,{np:()=>d});var r=t(3486),o=t(6115),i=r.Z[500],a=o.Z.white,d=(o.Z.black,{light:{palette:{mode:"light",primary:{main:i,dark:r.Z[700],light:r.Z[300],contrastText:a},secondary:{main:"#d32f2f",light:"#eb4242",dark:"#941212",contrastText:a},success:{main:"#2196f3",contrastText:a}}},dark:{palette:{mode:"dark",primary:{main:i,dark:r.Z[700],light:r.Z[300],contrastText:a},secondary:{main:"#d32f2f",light:"#eb4242",dark:"#941212",contrastText:a},success:{main:"#2196f3",contrastText:a}}}})},9464:(n,e,t)=>{t.r(e);var r,o=t(2950),i=t.n(o),a=t(2181),d=t.n(a),p=(t(5475),t(3839)),l=t.n(p),c=t(6501),s=(t(4810),t(8039),t(1551),t(4722),t(1654),function(n,e){return Object.defineProperty?Object.defineProperty(n,"raw",{value:e}):n.raw=e,n});l()(c.Z)(r||(r=s(["\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  max-height: 100%;\n"],["\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  max-height: 100%;\n"]))),t(4274),t(6235),t.p,t(5137),t(5142);var u,f,x,b=t(5468),h=function(n,e){return Object.defineProperty?Object.defineProperty(n,"raw",{value:e}):n.raw=e,n};l().div(u||(u=h(["\n  position: relative;\n  width: 500px;\n  height: 1000px;\n"],["\n  position: relative;\n  width: 500px;\n  height: 1000px;\n"]))),l().div(f||(f=h(["\n  background: url(",");\n  position: absolute;\n  z-index: 100;\n  width: 500px;\n  height: 1000px;\n  pointer-events: none;\n"],["\n  background: url(",");\n  position: absolute;\n  z-index: 100;\n  width: 500px;\n  height: 1000px;\n  pointer-events: none;\n"])),(function(n){return n.src})),l().div(x||(x=h(["\n  z-index: 2;\n  position: absolute;\n  bottom: 100px;\n  left: 50px;\n  right: 50px;\n  top: 100px;\n  display: flex;\n  flex-direction: column;\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  border-radius: 20px;\n  overflow: hidden;\n"],["\n  z-index: 2;\n  position: absolute;\n  bottom: 100px;\n  left: 50px;\n  right: 50px;\n  top: 100px;\n  display: flex;\n  flex-direction: column;\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  border-radius: 20px;\n  overflow: hidden;\n"]))),(0,b.Z)({palette:{mode:"light"}}),d().render(i().createElement((function(){return null}),null),document.getElementById("root"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,